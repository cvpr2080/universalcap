from .utils import *
from .logger import *
from torch import nn
from .typing import *
import math
import warnings

def get_batch_size(x: TensorOrSequence) -> int:
    if isinstance(x, torch.Tensor):
        b_s = x.size(0)
    else:
        b_s = x[0].size(0)
    return b_s


def get_device(x: TensorOrSequence) -> int:
    if isinstance(x, torch.Tensor):
        b_s = x.device
    else:
        b_s = x[0].device
    return b_s

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class DinoIntermediateFeatures(nn.Module):
    def __init__(self, module):
        super().__init__()
        self.module = module

    def forward(self, x):
        return self.module.get_intermediate_layers(x)[-1]

class ViTIntermediateFeatures(nn.Module):
    def __init__(self, module):
        super().__init__()
        self.module = module

    def forward(self, x):
        x = self.module.patch_embed(x)
        cls_token = self.module.cls_token.expand(x.shape[0], -1, -1)  # stole cls_tokens impl from Phil Wang, thanks
        if self.module.dist_token is None:
            x = torch.cat((cls_token, x), dim=1)
        else:
            x = torch.cat((cls_token, self.module.dist_token.expand(x.shape[0], -1, -1), x), dim=1)
        x = self.module.pos_drop(x + self.module.pos_embed)
        x = self.module.blocks(x)
        x = self.module.norm(x)
        return x

class CLIPIntermediateFeatures(nn.Module):
    def __init__(self, model_name, module):
        super().__init__()
        self.model_name = model_name
        self.module = module
        assert self.model_name in ('ViT-B/32', 'RN50', 'RN101', 'RN50x4', 'RN50x16', 'ViT-B/16')
        if self.model_name in ('RN50', 'RN101', 'RN50x4', 'RN50x16'):
            self.module.visual.attnpool = nn.Identity()

    @property
    def image_dim(self):
        if self.model_name in ('RN50', 'RN101'):
            return 2048
        elif self.model_name == 'RN50x4':
            return 2560
        elif self.model_name == 'RN50x16':
            return 3072
        elif self.model_name in ('ViT-B/32', 'ViT-B/16'):
            return 768

    def forward(self, x):
        if self.model_name in ('ViT-B/32', 'ViT-B/16'):
            return self.module.encode_image(x)[1]
        else:
            x = self.module.encode_image(x)
            b, c = x.shape[:2]
            return x.view(b, c, -1).permute(0, 2, 1)